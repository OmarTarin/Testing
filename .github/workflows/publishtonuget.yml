name: Build, Test, and Publish to NuGet

on:
  push:
    tags:
      - 'v*'  # Trigger on any tag push that starts with 'v'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x.x

      # Step 3: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Step 4: Set version from the tag in the .csproj
      - name: Set version in .csproj
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}  # Extract the tag version (e.g., 'v1.2.0')
          TAG_VERSION=${TAG_VERSION#v}  # Remove the 'v' character
          TAG_VERSION=$(echo $TAG_VERSION | xargs) # Remove characters like space or point
          echo "Setting version to $TAG_VERSION"
          sed -i "s|<Version>.*</Version>|<Version>${TAG_VERSION}</Version>|" /home/runner/work/Testing/Testing/src/DotNet.Testing.AutoMoqFixture/DotNet.Testing.AutoMoqFixture.csproj
      
      # Step 5: Build the project
      - name: Build the project
        run: dotnet build --configuration Release --no-restore

      # Step 6: Pack the NuGet package
      - name: Pack the NuGet package
        run: dotnet pack --configuration Release --no-build --output .

      # Step 7: Publish to NuGet
      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          echo "Pushing package to NuGet..."
          TAG_VERSION=${GITHUB_REF#refs/tags/}  # Extract the tag version (e.g., 'v1.2.0')
          echo "Using version $TAG_VERSION"
          dotnet nuget push "./AutoMoqFixture.${TAG_VERSION}.nupkg" --source https://api.nuget.org/v3/index.json --api-key $NUGET_API_KEY --skip-duplicate
